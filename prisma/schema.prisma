generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TRAINER
  TRAINEE
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  email          String          @unique
  password       String
  name           String
  role           UserRole        @default(TRAINEE)
  phone          String?
  address        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  classSchedule  ClassSchedule[]
  trainedClasses ClassSchedule[] @relation("TrainerClasses")
  bookings        Booking[]

  @@map("users")
}

model ClassSchedule {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  maxTrainees Int      @default(10)
  trainerId   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  trainer User      @relation("TrainerClasses", fields: [trainerId], references: [id])
  user    User?     @relation(fields: [userId], references: [id])
  userId  String?   @db.ObjectId
  bookings Booking[]

  @@map("class_schedules")
}

model Booking {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  traineeId       String        @db.ObjectId
  classScheduleId String        @db.ObjectId
  status          BookingStatus @default(CONFIRMED)
  bookedAt        DateTime      @default(now())
  cancelledAt     DateTime?

  // Relations
  trainee       User          @relation(fields: [traineeId], references: [id])
  classSchedule ClassSchedule @relation(fields: [classScheduleId], references: [id])

  @@unique([traineeId, classScheduleId])
  @@map("bookings")
}
